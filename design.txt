this document describes briefly the design of budg and how the user interacts
with it (e.g. command-line interface, python plugins api, etc) and the
behaviour of budg itself in respond to the user's actions.

this document will be written in a more formal way and converted to markdown
to be moved to the site directory but until i get a functioning version of
budg that can compile "site" it will stay here as a guide for me on how to
implement budg instead of mindlessly writing code.

let's start with the directory structure and the good to have defaults for
them. budg has a config file (defaults to config.toml in the current working
directory), all paths written in this file will be relative to the parent
directory of it. there's 3 directories:

layouts/ - functions as a templates directory for pages
pages/   - the files to be compiled through pre and post processors
public/  - files in this directory are copied as is to the build directory

and then there's the build directory the defaults to dist/.

here's a config.toml with custom directories:

[budg.directories]
templates = "layouts"
sources = "content"
statics = "public"
build = "dist"

budg comes with nothing out of the box it has to be configured to understand
and process your fancy markup language so it can generate HTML files because
by definition it's a static site generator not a processing bridge.

budg has a native understanding of templates/layouts and generally metadata
but we can't enforce a templating language upon the user neither can we
enforce a markup language like Markdown, to get support for such things
the user will need define pre/post processors. pre-processors are to run
before the generation of HTML files (if files of other types exist) and
post-processors operate on HTML files and manipulate them.
